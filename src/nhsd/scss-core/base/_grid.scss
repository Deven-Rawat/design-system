@use "sass:map";

// Settings
@use "scss-core/settings/vars";

// Helpers
@use "scss-core/helpers/colours" as nhsd-colours;

// Base
@use "scss-core/base/utils";

// Private properties
$-root: ".nhsd-grid";
// Gutters
$-gutter: .833rem;
$-small-gutter: .833rem * .667;
// Responsive breakpoints
$-bp-mobile: 375px;
$-bp-tablet: 1024px;
$-bp-desktop: 1240px;
$-bp-hd: 1366px;
$-bp-fullhd: 1580px;
// Maximum content widths
$-mobile-content-width: 18.611rem; // 335px
$-tablet-content-width: 38.222rem; // 688px
$-desktop-content-width: 52.444rem; // 944px
$-hd-content-width: 71.111rem; // 1280px - 1240
$-fullhd-content-width: 83.333rem; // 1500px

// Initialise the grid system with the custom settings
@use "sass-mq/mq" with (
  $mq-responsive: true,
  $mq-breakpoints: (
    mobile:   $-bp-mobile,
    tablet:   $-bp-tablet,
    desktop:  $-bp-desktop,
    hd:       $-bp-hd,
    fullhd:   $-bp-fullhd
  ),
  $mq-static-breakpoint: desktop,
);

$-grid-data-map: (
  mobile: (
    prefix: mob,
    columns: 2,
    breakpoints: (
      until: tablet
    )
  ),
  tablet: (
    prefix: tab,
    columns: 6,
    breakpoints: (
      from: tablet,
      until: desktop
    )
  ),
  desktop: (
    prefix: des,
    columns: 12,
    breakpoints: (
      from: desktop
    )
  )
);

%column-base {
  width: 100%;
  padding: 0 $-gutter;
  flex: 0 1 auto;
  overflow: hidden;
}

#{$-root} {
  @include utils.box-sizing;
  display: block;
  width: 100%;
  max-width: $-mobile-content-width;
  margin: 0 auto;
  padding: 0 $-gutter;

  &--full-width {
    @include utils.no-gutters;
    max-width: 100%;
  }

  &:not(&--full-width) {
    @include mq.mq($from: mobile) {
      max-width: $-tablet-content-width;
    }

    @include mq.mq($from: tablet) {
      max-width: $-desktop-content-width;
    }

    @include mq.mq($from: hd) {
      max-width: $-hd-content-width;
    }

    @include mq.mq($from: fullhd) {
      max-width: $-fullhd-content-width;
    }
  }

  &-row {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    align-items: stretch;
    flex-wrap: wrap;
    background: nhsd-colours.get("yellow-10-tint");
  }

  // Basic column
  &-col {
    @extend %column-base;
  }

  // Columns and offsets for all breakpoints
  @each $-device, $-props in $-grid-data-map {
    $-prefix: map.get($-props, "prefix");
    $-columns: map.get($-props, "columns");
    $-breakpoints: map.get($-props, "breakpoints");

    $-bp-from: map.get($-breakpoints, "from");
    $-bp-until: map.get($-breakpoints, "until");

    @for $-step from 0 through $-columns {
      &-col-#{$-prefix}-#{$-step} {
        @extend %column-base;
      }

      // Static
      @if $-device == "desktop" {
        &-col-#{$-step} {
          @extend %column-base;
          width: $-step / $-columns * 100%;
        }

        &-off-#{$-step} {
          margin-left: $-step / $-columns * 100%;
        }
      }

      // Responsive
      @include mq.mq($from: $-bp-from, $until: $-bp-until) {
        &-col-#{$-prefix}-#{$-step} {
          width: $-step / $-columns * 100%;
        }

        &-off-#{$-prefix}-#{$-step} {
          margin-left: $-step / $-columns * 100%;
        }
      }
    }
  }

  // Slight tweak to the inside gutters of the mobile columns
  @include mq.mq($until: tablet) {
    #{$-root}-col-mob-1:nth-child(2n+1):not(#{$-root}-off-mob-1) {
      padding-right: $-small-gutter;

      & + #{$-root}-col-mob-1 {
        padding-left: $-small-gutter;
      }
    }
  }

  // Better grid visibility in demo
  &--debug {
    @include utils.text-centre;

    div[class^="nhsd-grid-col-"] {
      padding-top: 1rem;
      padding-bottom: 1rem;
      background: nhsd-colours.get("mid-grey-20-tint");
      box-shadow: inset 0 0 0 .5px nhsd-colours.get("mid-grey");
      font-size: 65%;
    }

    // stylelint-disable declaration-no-important
    @include mq.mq($until: tablet) {
      #{$-root}-col-mob-1:nth-child(2n+1):not(#{$-root}-off-mob-1) {
        background: nhsd-colours.get("green") !important;

        & + #{$-root}-col-mob-1 {
          background: nhsd-colours.get("red") !important;
        }
      }
    }
    // stylelint-enable declaration-no-important
  }
}
